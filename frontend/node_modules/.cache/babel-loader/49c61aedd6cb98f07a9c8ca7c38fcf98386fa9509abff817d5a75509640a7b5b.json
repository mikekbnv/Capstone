{"ast":null,"code":"var _jsxFileName = \"/Users/mkkbnv/go/src/grpc-react-web/frontend/src/App.js\";\n// App.js\nimport React, { Component } from 'react';\nimport GrpcService from './GrpcService'; // Import your gRPC service wrapper\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleImageChange = event => {\n      const selectedImage = event.target.files[0];\n      this.setState({\n        selectedImage\n      });\n    };\n    this.handleUpload = () => {\n      const {\n        selectedImage\n      } = this.state;\n      if (!selectedImage) {\n        return;\n      }\n      const grpcService = new GrpcService('http://localhost:8080'); // Replace with your gRPC server URL\n\n      grpcService.sendImageStream(selectedImage, () => {\n        this.setState({\n          uploadStatus: 'Image uploaded successfully!'\n        });\n      });\n    };\n    this.state = {\n      selectedImage: null,\n      uploadStatus: ''\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Image Upload via gRPC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: this.handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleUpload,\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.uploadStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","GrpcService","jsxDEV","_jsxDEV","App","constructor","props","handleImageChange","event","selectedImage","target","files","setState","handleUpload","state","grpcService","sendImageStream","uploadStatus","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick"],"sources":["/Users/mkkbnv/go/src/grpc-react-web/frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { Component } from 'react';\nimport GrpcService from './GrpcService'; // Import your gRPC service wrapper\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedImage: null,\n      uploadStatus: '',\n    };\n  }\n\n  handleImageChange = (event) => {\n    const selectedImage = event.target.files[0];\n    this.setState({ selectedImage });\n  };\n\n  handleUpload = () => {\n    const { selectedImage } = this.state;\n    if (!selectedImage) {\n      return;\n    }\n\n    const grpcService = new GrpcService('http://localhost:8080'); // Replace with your gRPC server URL\n\n    grpcService.sendImageStream(selectedImage, () => {\n      this.setState({ uploadStatus: 'Image uploaded successfully!' });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Image Upload via gRPC</h1>\n        <input type=\"file\" accept=\"image/*\" onChange={this.handleImageChange} />\n        <button onClick={this.handleUpload}>Upload Image</button>\n        <p>{this.state.uploadStatus}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,GAAG,SAASJ,SAAS,CAAC;EAC1BK,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAOfC,iBAAiB,GAAIC,KAAK,IAAK;MAC7B,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAC3C,IAAI,CAACC,QAAQ,CAAC;QAAEH;MAAc,CAAC,CAAC;IAClC,CAAC;IAAA,KAEDI,YAAY,GAAG,MAAM;MACnB,MAAM;QAAEJ;MAAc,CAAC,GAAG,IAAI,CAACK,KAAK;MACpC,IAAI,CAACL,aAAa,EAAE;QAClB;MACF;MAEA,MAAMM,WAAW,GAAG,IAAId,WAAW,CAAC,uBAAuB,CAAC,CAAC,CAAC;;MAE9Dc,WAAW,CAACC,eAAe,CAACP,aAAa,EAAE,MAAM;QAC/C,IAAI,CAACG,QAAQ,CAAC;UAAEK,YAAY,EAAE;QAA+B,CAAC,CAAC;MACjE,CAAC,CAAC;IACJ,CAAC;IAtBC,IAAI,CAACH,KAAK,GAAG;MACXL,aAAa,EAAE,IAAI;MACnBQ,YAAY,EAAE;IAChB,CAAC;EACH;EAoBAC,MAAMA,CAAA,EAAG;IACP,oBACEf,OAAA;MAAKgB,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBjB,OAAA;QAAAiB,QAAA,EAAI;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BrB,OAAA;QAAOsB,IAAI,EAAC,MAAM;QAACC,MAAM,EAAC,SAAS;QAACC,QAAQ,EAAE,IAAI,CAACpB;MAAkB;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxErB,OAAA;QAAQyB,OAAO,EAAE,IAAI,CAACf,YAAa;QAAAO,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzDrB,OAAA;QAAAiB,QAAA,EAAI,IAAI,CAACN,KAAK,CAACG;MAAY;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC;EAEV;AACF;AAEA,eAAepB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}