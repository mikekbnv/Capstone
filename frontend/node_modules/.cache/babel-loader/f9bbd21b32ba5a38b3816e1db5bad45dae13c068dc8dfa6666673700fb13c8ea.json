{"ast":null,"code":"// GrpcService.js\nimport { EchoClient } from './jsclient/echo_grpc_web_pb';\nimport { Msg } from './jsclient/echo_pb';\nclass GrpcService {\n  constructor() {\n    this.client = new EchoClient('http://localhost:8080');\n  }\n  sendImageStream(imageFile, callback) {\n    const stream = this.client.echo();\n\n    // Handle stream data if needed\n    stream.on('data', response => {\n      console.log('Received data from server:', response);\n    });\n\n    // Handle stream end\n    stream.on('end', () => {\n      console.log('Stream ended.');\n      callback();\n    });\n\n    // Read and send image chunks to the server\n    const chunkSize = 1024; // Adjust this as needed\n    const reader = new FileReader();\n    reader.onload = () => {\n      const chunk = new Uint8Array(reader.result);\n      stream.write({\n        chunk\n      });\n      if (chunk.byteLength === chunkSize) {\n        // Read and send the next chunk\n        reader.readAsArrayBuffer(imageFile.slice(chunkSize));\n      } else {\n        // Close the stream when all chunks are sent\n        stream.end();\n      }\n    };\n\n    // Start the process by reading and sending the first chunk\n    reader.readAsArrayBuffer(imageFile.slice(0, chunkSize));\n  }\n}\nexport default GrpcService;","map":{"version":3,"names":["EchoClient","Msg","GrpcService","constructor","client","sendImageStream","imageFile","callback","stream","echo","on","response","console","log","chunkSize","reader","FileReader","onload","chunk","Uint8Array","result","write","byteLength","readAsArrayBuffer","slice","end"],"sources":["/Users/mkkbnv/go/src/grpc-react-web/frontend/src/GrpcService.js"],"sourcesContent":["// GrpcService.js\nimport { EchoClient } from './jsclient/echo_grpc_web_pb';\nimport { Msg } from './jsclient/echo_pb';\n\nclass GrpcService {\n  constructor() {\n    this.client = new EchoClient('http://localhost:8080');\n  }\n\n  sendImageStream(imageFile, callback) {\n    const stream = this.client.echo();\n\n    // Handle stream data if needed\n    stream.on('data', (response) => {\n      console.log('Received data from server:', response);\n    });\n\n    // Handle stream end\n    stream.on('end', () => {\n      console.log('Stream ended.');\n      callback();\n    });\n\n    // Read and send image chunks to the server\n    const chunkSize = 1024; // Adjust this as needed\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      const chunk = new Uint8Array(reader.result);\n      stream.write({ chunk });\n\n      if (chunk.byteLength === chunkSize) {\n        // Read and send the next chunk\n        reader.readAsArrayBuffer(imageFile.slice(chunkSize));\n      } else {\n        // Close the stream when all chunks are sent\n        stream.end();\n      }\n    };\n\n    // Start the process by reading and sending the first chunk\n    reader.readAsArrayBuffer(imageFile.slice(0, chunkSize));\n  }\n}\n\nexport default GrpcService;\n"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,6BAA6B;AACxD,SAASC,GAAG,QAAQ,oBAAoB;AAExC,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,IAAIJ,UAAU,CAAC,uBAAuB,CAAC;EACvD;EAEAK,eAAeA,CAACC,SAAS,EAAEC,QAAQ,EAAE;IACnC,MAAMC,MAAM,GAAG,IAAI,CAACJ,MAAM,CAACK,IAAI,CAAC,CAAC;;IAEjC;IACAD,MAAM,CAACE,EAAE,CAAC,MAAM,EAAGC,QAAQ,IAAK;MAC9BC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,QAAQ,CAAC;IACrD,CAAC,CAAC;;IAEF;IACAH,MAAM,CAACE,EAAE,CAAC,KAAK,EAAE,MAAM;MACrBE,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5BN,QAAQ,CAAC,CAAC;IACZ,CAAC,CAAC;;IAEF;IACA,MAAMO,SAAS,GAAG,IAAI,CAAC,CAAC;IACxB,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAG,MAAM;MACpB,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACJ,MAAM,CAACK,MAAM,CAAC;MAC3CZ,MAAM,CAACa,KAAK,CAAC;QAAEH;MAAM,CAAC,CAAC;MAEvB,IAAIA,KAAK,CAACI,UAAU,KAAKR,SAAS,EAAE;QAClC;QACAC,MAAM,CAACQ,iBAAiB,CAACjB,SAAS,CAACkB,KAAK,CAACV,SAAS,CAAC,CAAC;MACtD,CAAC,MAAM;QACL;QACAN,MAAM,CAACiB,GAAG,CAAC,CAAC;MACd;IACF,CAAC;;IAED;IACAV,MAAM,CAACQ,iBAAiB,CAACjB,SAAS,CAACkB,KAAK,CAAC,CAAC,EAAEV,SAAS,CAAC,CAAC;EACzD;AACF;AAEA,eAAeZ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}