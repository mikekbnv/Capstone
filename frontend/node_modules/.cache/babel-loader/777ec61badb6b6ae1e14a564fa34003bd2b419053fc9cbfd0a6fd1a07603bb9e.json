{"ast":null,"code":"var _jsxFileName = \"/Users/mkkbnv/go/src/grpc-react-web/frontend/src/App.js\";\n// src/GrpcClient.js\nimport React, { Component } from 'react';\nimport { EchoClient } from './jsclient/echo_grpc_web_pb';\nimport { Msg } from './jsclient/echo_pb';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleImageChange = event => {\n      const selectedImage = event.target.files[0];\n      this.setState({\n        selectedImage\n      });\n    };\n    this.handleTextChange = event => {\n      const inputText = event.target.value;\n      this.setState({\n        inputText\n      });\n    };\n    this.handleUpload = () => {\n      const {\n        selectedImage,\n        inputText\n      } = this.state;\n      if (!selectedImage || !inputText) {\n        return;\n      }\n      const echoService = new EchoClient('http://localhost:8080'); // Replace with your gRPC server URL\n\n      const streamRequest = new Msg();\n      streamRequest.setText(inputText);\n\n      // Convert the selected image to base64 and set it as the binary chunk\n      const reader = new FileReader();\n      reader.readAsDataURL(selectedImage);\n      reader.onload = () => {\n        const base64Image = reader.result.split(',')[1]; // Extract base64 data\n        streamRequest.setChunk(base64Image);\n\n        // Create a writable gRPC stream for sending the message\n        const stream = echoService.echo();\n\n        // Send the message to the server\n        stream.write(streamRequest);\n\n        // Listen for the end event to handle stream completion\n        stream.on('end', () => {\n          console.log('Stream ended.');\n        });\n\n        // Close the stream to complete the request\n        stream.end();\n        this.setState({\n          uploadStatus: 'Image and text uploaded successfully!'\n        });\n      };\n    };\n    this.state = {\n      selectedImage: null,\n      inputText: '',\n      uploadStatus: '',\n      responseText: ''\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Image and Text Upload via gRPC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: this.handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter text\",\n        value: this.state.inputText,\n        onChange: this.handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleUpload,\n        children: \"Upload Image and Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.uploadStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Response: \", this.state.responseText]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;\n\n// class GrpcClient extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       inputText: '',\n//       responseText: '',\n//     };\n//   }\n\n//   handleChange = (event) => {\n//     this.setState({ inputText: event.target.value });\n//   };\n\n//   handleSendRequest = () => {\n//     const { inputText } = this.state;\n\n//     const request = new Msg();\n//     request.setText(inputText);\n\n//     const client = new EchoClient('http://localhost:8080'); // Replace with your gRPC server URL\n//     var stream = client.echo\n\n//     client.echo(request, {}, (err, response) => {\n//       if (!err) {\n//         this.setState({ responseText: response.getMessage() });\n//       } else {\n//         console.error('Error:', err);\n//       }\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <h1>gRPC Client</h1>\n//         <div>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter text\"\n//             value={this.state.inputText}\n//             onChange={this.handleChange}\n//           />\n//           <button onClick={this.handleSendRequest}>Send</button>\n//         </div>\n//         <div>\n//           <p>Response:</p>\n//           <p>{this.state.responseText}</p>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default GrpcClient;","map":{"version":3,"names":["React","Component","EchoClient","Msg","jsxDEV","_jsxDEV","App","constructor","props","handleImageChange","event","selectedImage","target","files","setState","handleTextChange","inputText","value","handleUpload","state","echoService","streamRequest","setText","reader","FileReader","readAsDataURL","onload","base64Image","result","split","setChunk","stream","echo","write","on","console","log","end","uploadStatus","responseText","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","placeholder","onClick"],"sources":["/Users/mkkbnv/go/src/grpc-react-web/frontend/src/App.js"],"sourcesContent":["// src/GrpcClient.js\nimport React, { Component } from 'react';\nimport { EchoClient } from './jsclient/echo_grpc_web_pb';\nimport { Msg } from './jsclient/echo_pb';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedImage: null,\n      inputText: '',\n      uploadStatus: '',\n      responseText: '',\n    };\n  }\n\n  handleImageChange = (event) => {\n    const selectedImage = event.target.files[0];\n    this.setState({ selectedImage });\n  };\n\n  handleTextChange = (event) => {\n    const inputText = event.target.value;\n    this.setState({ inputText });\n  };\n\n  handleUpload = () => {\n    const { selectedImage, inputText } = this.state;\n    if (!selectedImage || !inputText) {\n      return;\n    }\n\n    const echoService = new EchoClient('http://localhost:8080'); // Replace with your gRPC server URL\n\n    const streamRequest = new Msg();\n    streamRequest.setText(inputText);\n\n    // Convert the selected image to base64 and set it as the binary chunk\n    const reader = new FileReader();\n    reader.readAsDataURL(selectedImage);\n    reader.onload = () => {\n      const base64Image = reader.result.split(',')[1]; // Extract base64 data\n      streamRequest.setChunk(base64Image);\n\n      // Create a writable gRPC stream for sending the message\n      const stream = echoService.echo();\n\n      // Send the message to the server\n      stream.write(streamRequest);\n\n      // Listen for the end event to handle stream completion\n      stream.on('end', () => {\n        console.log('Stream ended.');\n      });\n\n      // Close the stream to complete the request\n      stream.end();\n\n      this.setState({ uploadStatus: 'Image and text uploaded successfully!' });\n    };\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Image and Text Upload via gRPC</h1>\n        <input type=\"file\" accept=\"image/*\" onChange={this.handleImageChange} />\n        <input\n          type=\"text\"\n          placeholder=\"Enter text\"\n          value={this.state.inputText}\n          onChange={this.handleTextChange}\n        />\n        <button onClick={this.handleUpload}>Upload Image and Text</button>\n        <p>{this.state.uploadStatus}</p>\n        <p>Response: {this.state.responseText}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// class GrpcClient extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       inputText: '',\n//       responseText: '',\n//     };\n//   }\n\n//   handleChange = (event) => {\n//     this.setState({ inputText: event.target.value });\n//   };\n\n//   handleSendRequest = () => {\n//     const { inputText } = this.state;\n\n//     const request = new Msg();\n//     request.setText(inputText);\n\n//     const client = new EchoClient('http://localhost:8080'); // Replace with your gRPC server URL\n//     var stream = client.echo\n\n//     client.echo(request, {}, (err, response) => {\n//       if (!err) {\n//         this.setState({ responseText: response.getMessage() });\n//       } else {\n//         console.error('Error:', err);\n//       }\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <h1>gRPC Client</h1>\n//         <div>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter text\"\n//             value={this.state.inputText}\n//             onChange={this.handleChange}\n//           />\n//           <button onClick={this.handleSendRequest}>Send</button>\n//         </div>\n//         <div>\n//           <p>Response:</p>\n//           <p>{this.state.responseText}</p>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default GrpcClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}