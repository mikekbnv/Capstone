{"ast":null,"code":"var _jsxFileName = \"/Users/mkkbnv/go/src/grpc-react-web/frontend/src/App.js\";\n// src/GrpcClient.js\nimport React, { Component } from 'react';\nimport { AccessClient } from './jsclient/echo_grpc_web_pb';\nimport { AccessRequest } from './jsclient/echo_pb';\n// import { EchoClient } from './jsclient/echo_grpc_web_pb';\n// import { Msg } from './jsclient/echo_pb';\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       selectedImage: null,\n//       inputText: '',\n//       uploadStatus: '',\n//       responseText: '',\n//     };\n//   }\n\n//   handleImageChange = (event) => {\n//     const selectedImage = event.target.files[0];\n//     this.setState({ selectedImage });\n//   };\n\n//   handleTextChange = (event) => {\n//     const inputText = event.target.value;\n//     this.setState({ inputText });\n//   };\n\n//   handleUpload = () => {\n//     const { selectedImage, inputText } = this.state;\n//     if (!selectedImage || !inputText) {\n//       return;\n//     }\n\n//     const client = new AccessClient('http://localhost:8080'); // Replace with your gRPC server URL\n\n//     const streamRequest = new AccessRequest();\n//     streamRequest.setText(inputText);\n\n//     client.echo(request, {}, (err, response) => {\n//       if (!err) {\n//         this.setState({ responseText: response.getMessage() });\n//       } else {\n//         console.error('Error:', err);\n//       }\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h1>Image and Text Upload via gRPC</h1>\n//         <input type=\"file\" accept=\"image/*\" onChange={this.handleImageChange} />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter text\"\n//           value={this.state.inputText}\n//           onChange={this.handleTextChange}\n//         />\n//         <button onClick={this.handleUpload}>Upload Image and Text</button>\n//         <p>{this.state.uploadStatus}</p>\n//         <p>Response: {this.state.responseText}</p>\n//       </div>\n//     );\n//   }\n// }\n\n//export default App;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass GrpcClient extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = event => {\n      this.setState({\n        inputText: event.target.value\n      });\n    };\n    this.handleSendRequest = () => {\n      const {\n        inputText\n      } = this.state;\n      const request = new AccessRequest();\n      request.setId(inputText);\n      const client = new AccessClient('http://localhost:8080'); // Replace with your gRPC server URL\n      // var stream = client.echo\n\n      client.echo(request, {}, (err, response) => {\n        if (!err) {\n          const responseText = response.getAccess();\n          this.setState({\n            responseText: responseText\n          });\n        } else {\n          console.error('Error:', err);\n        }\n      });\n    };\n    this.state = {\n      inputText: '',\n      responseText: ''\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"gRPC Client\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter text\",\n          value: this.state.inputText,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleSendRequest,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Response:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.responseText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default GrpcClient;","map":{"version":3,"names":["React","Component","AccessClient","AccessRequest","jsxDEV","_jsxDEV","GrpcClient","constructor","props","handleChange","event","setState","inputText","target","value","handleSendRequest","state","request","setId","client","echo","err","response","responseText","getAccess","console","error","render","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick"],"sources":["/Users/mkkbnv/go/src/grpc-react-web/frontend/src/App.js"],"sourcesContent":["// src/GrpcClient.js\nimport React, { Component } from 'react';\nimport { AccessClient } from './jsclient/echo_grpc_web_pb';\nimport { AccessRequest } from './jsclient/echo_pb';\n// import { EchoClient } from './jsclient/echo_grpc_web_pb';\n// import { Msg } from './jsclient/echo_pb';\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       selectedImage: null,\n//       inputText: '',\n//       uploadStatus: '',\n//       responseText: '',\n//     };\n//   }\n\n//   handleImageChange = (event) => {\n//     const selectedImage = event.target.files[0];\n//     this.setState({ selectedImage });\n//   };\n\n//   handleTextChange = (event) => {\n//     const inputText = event.target.value;\n//     this.setState({ inputText });\n//   };\n\n//   handleUpload = () => {\n//     const { selectedImage, inputText } = this.state;\n//     if (!selectedImage || !inputText) {\n//       return;\n//     }\n\n//     const client = new AccessClient('http://localhost:8080'); // Replace with your gRPC server URL\n    \n//     const streamRequest = new AccessRequest();\n//     streamRequest.setText(inputText);\n    \n//     client.echo(request, {}, (err, response) => {\n//       if (!err) {\n//         this.setState({ responseText: response.getMessage() });\n//       } else {\n//         console.error('Error:', err);\n//       }\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h1>Image and Text Upload via gRPC</h1>\n//         <input type=\"file\" accept=\"image/*\" onChange={this.handleImageChange} />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter text\"\n//           value={this.state.inputText}\n//           onChange={this.handleTextChange}\n//         />\n//         <button onClick={this.handleUpload}>Upload Image and Text</button>\n//         <p>{this.state.uploadStatus}</p>\n//         <p>Response: {this.state.responseText}</p>\n//       </div>\n//     );\n//   }\n// }\n\n//export default App;\n\nclass GrpcClient extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: '',\n      responseText: '',\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({ inputText: event.target.value });\n  };\n\n  handleSendRequest = () => {\n    const { inputText } = this.state;\n\n    const request = new AccessRequest();\n    request.setId(inputText);\n\n    const client = new AccessClient('http://localhost:8080'); // Replace with your gRPC server URL\n    // var stream = client.echo\n\n    client.echo(request, {}, (err, response) => {\n      if (!err) {\n        const responseText = response.getAccess();\n        \n        this.setState({ responseText: responseText });\n      } else {\n        console.error('Error:', err);\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>gRPC Client</h1>\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Enter text\"\n            value={this.state.inputText}\n            onChange={this.handleChange}\n          />\n          <button onClick={this.handleSendRequest}>Send</button>\n        </div>\n        <div>\n          <p>Response:</p>\n          <p>{this.state.responseText}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GrpcClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}