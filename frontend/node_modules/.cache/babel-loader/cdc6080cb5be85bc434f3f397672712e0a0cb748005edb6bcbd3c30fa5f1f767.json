{"ast":null,"code":"var _jsxFileName = \"/Users/mkkbnv/go/src/grpc-react-web/frontend/src/App.js\";\n// App.js\nimport React, { Component } from 'react';\nimport GrpcService from './GrpcService'; // Import your gRPC service wrapper\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleImageChange = event => {\n      const selectedImage = event.target.files[0];\n      this.setState({\n        selectedImage\n      });\n    };\n    this.handleTextChange = event => {\n      const inputText = event.target.value;\n      this.setState({\n        inputText\n      });\n    };\n    this.handleUpload = () => {\n      const {\n        selectedImage,\n        inputText\n      } = this.state;\n      if (!selectedImage || !inputText) {\n        return;\n      }\n      const grpcService = new GrpcService('http://localhost:8080'); // Replace with your gRPC server URL\n\n      grpcService.sendImageAndText(selectedImage, inputText, response => {\n        this.setState({\n          uploadStatus: 'Image and text uploaded successfully!',\n          responseText: response.getMessage()\n        });\n      });\n    };\n    this.state = {\n      selectedImage: null,\n      inputText: '',\n      uploadStatus: '',\n      responseText: '' // Added state for response text\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Image and Text Upload via gRPC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: this.handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter text\",\n        value: this.state.inputText,\n        onChange: this.handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleUpload,\n        children: \"Upload Image and Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.uploadStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Response: \", this.state.responseText]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","GrpcService","jsxDEV","_jsxDEV","App","constructor","props","handleImageChange","event","selectedImage","target","files","setState","handleTextChange","inputText","value","handleUpload","state","grpcService","sendImageAndText","response","uploadStatus","responseText","getMessage","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","placeholder","onClick"],"sources":["/Users/mkkbnv/go/src/grpc-react-web/frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { Component } from 'react';\nimport GrpcService from './GrpcService'; // Import your gRPC service wrapper\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedImage: null,\n      inputText: '',\n      uploadStatus: '',\n      responseText: '', // Added state for response text\n    };\n  }\n\n  handleImageChange = (event) => {\n    const selectedImage = event.target.files[0];\n    this.setState({ selectedImage });\n  };\n\n  handleTextChange = (event) => {\n    const inputText = event.target.value;\n    this.setState({ inputText });\n  };\n\n  handleUpload = () => {\n    const { selectedImage, inputText } = this.state;\n    if (!selectedImage || !inputText) {\n      return;\n    }\n\n    const grpcService = new GrpcService('http://localhost:8080'); // Replace with your gRPC server URL\n\n    grpcService.sendImageAndText(selectedImage, inputText, (response) => {\n      this.setState({ uploadStatus: 'Image and text uploaded successfully!', responseText: response.getMessage() });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Image and Text Upload via gRPC</h1>\n        <input type=\"file\" accept=\"image/*\" onChange={this.handleImageChange} />\n        <input\n          type=\"text\"\n          placeholder=\"Enter text\"\n          value={this.state.inputText}\n          onChange={this.handleTextChange}\n        />\n        <button onClick={this.handleUpload}>Upload Image and Text</button>\n        <p>{this.state.uploadStatus}</p>\n        <p>Response: {this.state.responseText}</p> {/* Display the response text */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}