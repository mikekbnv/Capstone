{"ast":null,"code":"// source: echo.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = function () {\n  return this || window || global || self || Function('return this')();\n}.call(null);\ngoog.exportSymbol('proto.access.AccessRequest', null, global);\ngoog.exportSymbol('proto.access.AccessResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.access.AccessRequest = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.access.AccessRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.access.AccessRequest.displayName = 'proto.access.AccessRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.access.AccessResponse = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.access.AccessResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.access.AccessResponse.displayName = 'proto.access.AccessResponse';\n}\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.access.AccessRequest.prototype.toObject = function (opt_includeInstance) {\n    return proto.access.AccessRequest.toObject(opt_includeInstance, this);\n  };\n\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.access.AccessRequest} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n  proto.access.AccessRequest.toObject = function (includeInstance, msg) {\n    var f,\n      obj = {\n        id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n        chunk: msg.getChunk_asB64()\n      };\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n    return obj;\n  };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.access.AccessRequest}\n */\nproto.access.AccessRequest.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.access.AccessRequest();\n  return proto.access.AccessRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.access.AccessRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.access.AccessRequest}\n */\nproto.access.AccessRequest.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n      case 1:\n        var value = /** @type {string} */reader.readString();\n        msg.setId(value);\n        break;\n      case 2:\n        var value = /** @type {!Uint8Array} */reader.readBytes();\n        msg.setChunk(value);\n        break;\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n  return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.access.AccessRequest.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.access.AccessRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.access.AccessRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.access.AccessRequest.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n  f = message.getChunk_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(2, f);\n  }\n};\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.access.AccessRequest.prototype.getId = function () {\n  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n\n/**\n * @param {string} value\n * @return {!proto.access.AccessRequest} returns this\n */\nproto.access.AccessRequest.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n/**\n * optional bytes chunk = 2;\n * @return {string}\n */\nproto.access.AccessRequest.prototype.getChunk = function () {\n  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n\n/**\n * optional bytes chunk = 2;\n * This is a type-conversion wrapper around `getChunk()`\n * @return {string}\n */\nproto.access.AccessRequest.prototype.getChunk_asB64 = function () {\n  return (/** @type {string} */jspb.Message.bytesAsB64(this.getChunk())\n  );\n};\n\n/**\n * optional bytes chunk = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getChunk()`\n * @return {!Uint8Array}\n */\nproto.access.AccessRequest.prototype.getChunk_asU8 = function () {\n  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getChunk())\n  );\n};\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.access.AccessRequest} returns this\n */\nproto.access.AccessRequest.prototype.setChunk = function (value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.access.AccessResponse.prototype.toObject = function (opt_includeInstance) {\n    return proto.access.AccessResponse.toObject(opt_includeInstance, this);\n  };\n\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.access.AccessResponse} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n  proto.access.AccessResponse.toObject = function (includeInstance, msg) {\n    var f,\n      obj = {\n        access: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n      };\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n    return obj;\n  };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.access.AccessResponse}\n */\nproto.access.AccessResponse.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.access.AccessResponse();\n  return proto.access.AccessResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.access.AccessResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.access.AccessResponse}\n */\nproto.access.AccessResponse.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n      case 1:\n        var value = /** @type {boolean} */reader.readBool();\n        msg.setAccess(value);\n        break;\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n  return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.access.AccessResponse.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.access.AccessResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.access.AccessResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.access.AccessResponse.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getAccess();\n  if (f) {\n    writer.writeBool(1, f);\n  }\n};\n\n/**\n * optional bool access = 1;\n * @return {boolean}\n */\nproto.access.AccessResponse.prototype.getAccess = function () {\n  return (/** @type {boolean} */jspb.Message.getBooleanFieldWithDefault(this, 1, false)\n  );\n};\n\n/**\n * @param {boolean} value\n * @return {!proto.access.AccessResponse} returns this\n */\nproto.access.AccessResponse.prototype.setAccess = function (value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\ngoog.object.extend(exports, proto.access);","map":{"version":3,"names":["jspb","require","goog","global","window","self","Function","call","exportSymbol","proto","access","AccessRequest","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","AccessResponse","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","id","getFieldWithDefault","chunk","getChunk_asB64","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readString","setId","readBytes","setChunk","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","getId","length","writeString","getChunk_asU8","writeBytes","setProto3StringField","getChunk","bytesAsB64","bytesAsU8","setProto3BytesField","getBooleanFieldWithDefault","readBool","setAccess","getAccess","writeBool","setProto3BooleanField","object","extend","exports"],"sources":["/Users/mkkbnv/go/src/grpc-react-web/frontend/src/jsclient/echo_pb.js"],"sourcesContent":["// source: echo.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (function() { return this || window || global || self || Function('return this')(); }).call(null);\n\ngoog.exportSymbol('proto.access.AccessRequest', null, global);\ngoog.exportSymbol('proto.access.AccessResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.access.AccessRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.access.AccessRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.access.AccessRequest.displayName = 'proto.access.AccessRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.access.AccessResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.access.AccessResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.access.AccessResponse.displayName = 'proto.access.AccessResponse';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.access.AccessRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.access.AccessRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.access.AccessRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.access.AccessRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    chunk: msg.getChunk_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.access.AccessRequest}\n */\nproto.access.AccessRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.access.AccessRequest;\n  return proto.access.AccessRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.access.AccessRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.access.AccessRequest}\n */\nproto.access.AccessRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setId(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setChunk(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.access.AccessRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.access.AccessRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.access.AccessRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.access.AccessRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getId();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getChunk_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string id = 1;\n * @return {string}\n */\nproto.access.AccessRequest.prototype.getId = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.access.AccessRequest} returns this\n */\nproto.access.AccessRequest.prototype.setId = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional bytes chunk = 2;\n * @return {string}\n */\nproto.access.AccessRequest.prototype.getChunk = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes chunk = 2;\n * This is a type-conversion wrapper around `getChunk()`\n * @return {string}\n */\nproto.access.AccessRequest.prototype.getChunk_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getChunk()));\n};\n\n\n/**\n * optional bytes chunk = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getChunk()`\n * @return {!Uint8Array}\n */\nproto.access.AccessRequest.prototype.getChunk_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getChunk()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.access.AccessRequest} returns this\n */\nproto.access.AccessRequest.prototype.setChunk = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.access.AccessResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.access.AccessResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.access.AccessResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.access.AccessResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    access: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.access.AccessResponse}\n */\nproto.access.AccessResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.access.AccessResponse;\n  return proto.access.AccessResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.access.AccessResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.access.AccessResponse}\n */\nproto.access.AccessResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setAccess(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.access.AccessResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.access.AccessResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.access.AccessResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.access.AccessResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getAccess();\n  if (f) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool access = 1;\n * @return {boolean}\n */\nproto.access.AccessResponse.prototype.getAccess = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.access.AccessResponse} returns this\n */\nproto.access.AccessResponse.prototype.setAccess = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.access);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACrC,IAAIC,IAAI,GAAGF,IAAI;AACf,IAAIG,MAAM,GAAI,YAAW;EAAE,OAAO,IAAI,IAAIC,MAAM,IAAID,MAAM,IAAIE,IAAI,IAAIC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;AAAE,CAAC,CAAEC,IAAI,CAAC,IAAI,CAAC;AAE9GL,IAAI,CAACM,YAAY,CAAC,4BAA4B,EAAE,IAAI,EAAEL,MAAM,CAAC;AAC7DD,IAAI,CAACM,YAAY,CAAC,6BAA6B,EAAE,IAAI,EAAEL,MAAM,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAM,KAAK,CAACC,MAAM,CAACC,aAAa,GAAG,UAASC,QAAQ,EAAE;EAC9CZ,IAAI,CAACa,OAAO,CAACC,UAAU,CAAC,IAAI,EAAEF,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;AAC5D,CAAC;AACDV,IAAI,CAACa,QAAQ,CAACN,KAAK,CAACC,MAAM,CAACC,aAAa,EAAEX,IAAI,CAACa,OAAO,CAAC;AACvD,IAAIX,IAAI,CAACc,KAAK,IAAI,CAACC,QAAQ,EAAE;EAC3B;AACF;AACA;AACA;EACER,KAAK,CAACC,MAAM,CAACC,aAAa,CAACO,WAAW,GAAG,4BAA4B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,KAAK,CAACC,MAAM,CAACS,cAAc,GAAG,UAASP,QAAQ,EAAE;EAC/CZ,IAAI,CAACa,OAAO,CAACC,UAAU,CAAC,IAAI,EAAEF,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;AAC5D,CAAC;AACDV,IAAI,CAACa,QAAQ,CAACN,KAAK,CAACC,MAAM,CAACS,cAAc,EAAEnB,IAAI,CAACa,OAAO,CAAC;AACxD,IAAIX,IAAI,CAACc,KAAK,IAAI,CAACC,QAAQ,EAAE;EAC3B;AACF;AACA;AACA;EACER,KAAK,CAACC,MAAM,CAACS,cAAc,CAACD,WAAW,GAAG,6BAA6B;AACzE;AAIA,IAAIlB,IAAI,CAACa,OAAO,CAACO,kBAAkB,EAAE;EACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAX,KAAK,CAACC,MAAM,CAACC,aAAa,CAACU,SAAS,CAACC,QAAQ,GAAG,UAASC,mBAAmB,EAAE;IAC5E,OAAOd,KAAK,CAACC,MAAM,CAACC,aAAa,CAACW,QAAQ,CAACC,mBAAmB,EAAE,IAAI,CAAC;EACvE,CAAC;;EAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAd,KAAK,CAACC,MAAM,CAACC,aAAa,CAACW,QAAQ,GAAG,UAASE,eAAe,EAAEC,GAAG,EAAE;IACnE,IAAIC,CAAC;MAAEC,GAAG,GAAG;QACXC,EAAE,EAAE5B,IAAI,CAACa,OAAO,CAACgB,mBAAmB,CAACJ,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;QAChDK,KAAK,EAAEL,GAAG,CAACM,cAAc,CAAC;MAC5B,CAAC;IAED,IAAIP,eAAe,EAAE;MACnBG,GAAG,CAACK,oBAAoB,GAAGP,GAAG;IAChC;IACA,OAAOE,GAAG;EACZ,CAAC;AACD;;AAGA;AACA;AACA;AACA;AACA;AACAlB,KAAK,CAACC,MAAM,CAACC,aAAa,CAACsB,iBAAiB,GAAG,UAASC,KAAK,EAAE;EAC7D,IAAIC,MAAM,GAAG,IAAInC,IAAI,CAACoC,YAAY,CAACF,KAAK,CAAC;EACzC,IAAIT,GAAG,GAAG,IAAIhB,KAAK,CAACC,MAAM,CAACC,aAAa,CAAD,CAAC;EACxC,OAAOF,KAAK,CAACC,MAAM,CAACC,aAAa,CAAC0B,2BAA2B,CAACZ,GAAG,EAAEU,MAAM,CAAC;AAC5E,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA1B,KAAK,CAACC,MAAM,CAACC,aAAa,CAAC0B,2BAA2B,GAAG,UAASZ,GAAG,EAAEU,MAAM,EAAE;EAC7E,OAAOA,MAAM,CAACG,SAAS,CAAC,CAAC,EAAE;IACzB,IAAIH,MAAM,CAACI,UAAU,CAAC,CAAC,EAAE;MACvB;IACF;IACA,IAAIC,KAAK,GAAGL,MAAM,CAACM,cAAc,CAAC,CAAC;IACnC,QAAQD,KAAK;MACb,KAAK,CAAC;QACJ,IAAIE,KAAK,GAAG,qBAAuBP,MAAM,CAACQ,UAAU,CAAC,CAAE;QACvDlB,GAAG,CAACmB,KAAK,CAACF,KAAK,CAAC;QAChB;MACF,KAAK,CAAC;QACJ,IAAIA,KAAK,GAAG,0BAA4BP,MAAM,CAACU,SAAS,CAAC,CAAE;QAC3DpB,GAAG,CAACqB,QAAQ,CAACJ,KAAK,CAAC;QACnB;MACF;QACEP,MAAM,CAACY,SAAS,CAAC,CAAC;QAClB;IACF;EACF;EACA,OAAOtB,GAAG;AACZ,CAAC;;AAGD;AACA;AACA;AACA;AACAhB,KAAK,CAACC,MAAM,CAACC,aAAa,CAACU,SAAS,CAAC2B,eAAe,GAAG,YAAW;EAChE,IAAIC,MAAM,GAAG,IAAIjD,IAAI,CAACkD,YAAY,CAAC,CAAC;EACpCzC,KAAK,CAACC,MAAM,CAACC,aAAa,CAACwC,uBAAuB,CAAC,IAAI,EAAEF,MAAM,CAAC;EAChE,OAAOA,MAAM,CAACG,eAAe,CAAC,CAAC;AACjC,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA3C,KAAK,CAACC,MAAM,CAACC,aAAa,CAACwC,uBAAuB,GAAG,UAASE,OAAO,EAAEJ,MAAM,EAAE;EAC7E,IAAIvB,CAAC,GAAG4B,SAAS;EACjB5B,CAAC,GAAG2B,OAAO,CAACE,KAAK,CAAC,CAAC;EACnB,IAAI7B,CAAC,CAAC8B,MAAM,GAAG,CAAC,EAAE;IAChBP,MAAM,CAACQ,WAAW,CAChB,CAAC,EACD/B,CACF,CAAC;EACH;EACAA,CAAC,GAAG2B,OAAO,CAACK,aAAa,CAAC,CAAC;EAC3B,IAAIhC,CAAC,CAAC8B,MAAM,GAAG,CAAC,EAAE;IAChBP,MAAM,CAACU,UAAU,CACf,CAAC,EACDjC,CACF,CAAC;EACH;AACF,CAAC;;AAGD;AACA;AACA;AACA;AACAjB,KAAK,CAACC,MAAM,CAACC,aAAa,CAACU,SAAS,CAACkC,KAAK,GAAG,YAAW;EACtD,OAAO,sBAAuBvD,IAAI,CAACa,OAAO,CAACgB,mBAAmB,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;EAAC;AAC7E,CAAC;;AAGD;AACA;AACA;AACA;AACApB,KAAK,CAACC,MAAM,CAACC,aAAa,CAACU,SAAS,CAACuB,KAAK,GAAG,UAASF,KAAK,EAAE;EAC3D,OAAO1C,IAAI,CAACa,OAAO,CAAC+C,oBAAoB,CAAC,IAAI,EAAE,CAAC,EAAElB,KAAK,CAAC;AAC1D,CAAC;;AAGD;AACA;AACA;AACA;AACAjC,KAAK,CAACC,MAAM,CAACC,aAAa,CAACU,SAAS,CAACwC,QAAQ,GAAG,YAAW;EACzD,OAAO,sBAAuB7D,IAAI,CAACa,OAAO,CAACgB,mBAAmB,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;EAAC;AAC7E,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACApB,KAAK,CAACC,MAAM,CAACC,aAAa,CAACU,SAAS,CAACU,cAAc,GAAG,YAAW;EAC/D,OAAO,sBAAuB/B,IAAI,CAACa,OAAO,CAACiD,UAAU,CACjD,IAAI,CAACD,QAAQ,CAAC,CAAC;EAAC;AACtB,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACApD,KAAK,CAACC,MAAM,CAACC,aAAa,CAACU,SAAS,CAACqC,aAAa,GAAG,YAAW;EAC9D,OAAO,2BAA4B1D,IAAI,CAACa,OAAO,CAACkD,SAAS,CACrD,IAAI,CAACF,QAAQ,CAAC,CAAC;EAAC;AACtB,CAAC;;AAGD;AACA;AACA;AACA;AACApD,KAAK,CAACC,MAAM,CAACC,aAAa,CAACU,SAAS,CAACyB,QAAQ,GAAG,UAASJ,KAAK,EAAE;EAC9D,OAAO1C,IAAI,CAACa,OAAO,CAACmD,mBAAmB,CAAC,IAAI,EAAE,CAAC,EAAEtB,KAAK,CAAC;AACzD,CAAC;AAMD,IAAI1C,IAAI,CAACa,OAAO,CAACO,kBAAkB,EAAE;EACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAX,KAAK,CAACC,MAAM,CAACS,cAAc,CAACE,SAAS,CAACC,QAAQ,GAAG,UAASC,mBAAmB,EAAE;IAC7E,OAAOd,KAAK,CAACC,MAAM,CAACS,cAAc,CAACG,QAAQ,CAACC,mBAAmB,EAAE,IAAI,CAAC;EACxE,CAAC;;EAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAd,KAAK,CAACC,MAAM,CAACS,cAAc,CAACG,QAAQ,GAAG,UAASE,eAAe,EAAEC,GAAG,EAAE;IACpE,IAAIC,CAAC;MAAEC,GAAG,GAAG;QACXjB,MAAM,EAAEV,IAAI,CAACa,OAAO,CAACoD,0BAA0B,CAACxC,GAAG,EAAE,CAAC,EAAE,KAAK;MAC/D,CAAC;IAED,IAAID,eAAe,EAAE;MACnBG,GAAG,CAACK,oBAAoB,GAAGP,GAAG;IAChC;IACA,OAAOE,GAAG;EACZ,CAAC;AACD;;AAGA;AACA;AACA;AACA;AACA;AACAlB,KAAK,CAACC,MAAM,CAACS,cAAc,CAACc,iBAAiB,GAAG,UAASC,KAAK,EAAE;EAC9D,IAAIC,MAAM,GAAG,IAAInC,IAAI,CAACoC,YAAY,CAACF,KAAK,CAAC;EACzC,IAAIT,GAAG,GAAG,IAAIhB,KAAK,CAACC,MAAM,CAACS,cAAc,CAAD,CAAC;EACzC,OAAOV,KAAK,CAACC,MAAM,CAACS,cAAc,CAACkB,2BAA2B,CAACZ,GAAG,EAAEU,MAAM,CAAC;AAC7E,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA1B,KAAK,CAACC,MAAM,CAACS,cAAc,CAACkB,2BAA2B,GAAG,UAASZ,GAAG,EAAEU,MAAM,EAAE;EAC9E,OAAOA,MAAM,CAACG,SAAS,CAAC,CAAC,EAAE;IACzB,IAAIH,MAAM,CAACI,UAAU,CAAC,CAAC,EAAE;MACvB;IACF;IACA,IAAIC,KAAK,GAAGL,MAAM,CAACM,cAAc,CAAC,CAAC;IACnC,QAAQD,KAAK;MACb,KAAK,CAAC;QACJ,IAAIE,KAAK,GAAG,sBAAwBP,MAAM,CAAC+B,QAAQ,CAAC,CAAE;QACtDzC,GAAG,CAAC0C,SAAS,CAACzB,KAAK,CAAC;QACpB;MACF;QACEP,MAAM,CAACY,SAAS,CAAC,CAAC;QAClB;IACF;EACF;EACA,OAAOtB,GAAG;AACZ,CAAC;;AAGD;AACA;AACA;AACA;AACAhB,KAAK,CAACC,MAAM,CAACS,cAAc,CAACE,SAAS,CAAC2B,eAAe,GAAG,YAAW;EACjE,IAAIC,MAAM,GAAG,IAAIjD,IAAI,CAACkD,YAAY,CAAC,CAAC;EACpCzC,KAAK,CAACC,MAAM,CAACS,cAAc,CAACgC,uBAAuB,CAAC,IAAI,EAAEF,MAAM,CAAC;EACjE,OAAOA,MAAM,CAACG,eAAe,CAAC,CAAC;AACjC,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA3C,KAAK,CAACC,MAAM,CAACS,cAAc,CAACgC,uBAAuB,GAAG,UAASE,OAAO,EAAEJ,MAAM,EAAE;EAC9E,IAAIvB,CAAC,GAAG4B,SAAS;EACjB5B,CAAC,GAAG2B,OAAO,CAACe,SAAS,CAAC,CAAC;EACvB,IAAI1C,CAAC,EAAE;IACLuB,MAAM,CAACoB,SAAS,CACd,CAAC,EACD3C,CACF,CAAC;EACH;AACF,CAAC;;AAGD;AACA;AACA;AACA;AACAjB,KAAK,CAACC,MAAM,CAACS,cAAc,CAACE,SAAS,CAAC+C,SAAS,GAAG,YAAW;EAC3D,OAAO,uBAAwBpE,IAAI,CAACa,OAAO,CAACoD,0BAA0B,CAAC,IAAI,EAAE,CAAC,EAAE,KAAK;EAAC;AACxF,CAAC;;AAGD;AACA;AACA;AACA;AACAxD,KAAK,CAACC,MAAM,CAACS,cAAc,CAACE,SAAS,CAAC8C,SAAS,GAAG,UAASzB,KAAK,EAAE;EAChE,OAAO1C,IAAI,CAACa,OAAO,CAACyD,qBAAqB,CAAC,IAAI,EAAE,CAAC,EAAE5B,KAAK,CAAC;AAC3D,CAAC;AAGDxC,IAAI,CAACqE,MAAM,CAACC,MAAM,CAACC,OAAO,EAAEhE,KAAK,CAACC,MAAM,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}